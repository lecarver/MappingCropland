//SET UP STUDY AREA GEOMTRY 
var south_zambia = ee.FeatureCollection("users/yayao/south_zambia").geometry();

//PART 1 - CALCULATING NDVI & GCVI FROM PLANT-IMAGERY BANDS

//This script is tested using Landsat 8 Collection 2 Tier 1 imagery
//Select country boundary for Zambia
var zambia = countries.filter(ee.Filter.eq('country_na', 'Zambia'));

//Computes a Landsat TOA composite to remove cloud cover -- not sure if this step is necessary for our imagery 
var composite = ee.Algorithms.Landsat.simpleComposite({
  collection: Landsat8.filterDate('2021-01-01', '2021-12-31'),
  asFloat: true
})
print(composite)

//Create color palette using red, green, blue bands respectively
var trueColorVis = {min: 0, max: 0.3, bands: ['B4', 'B3', 'B2']};
Map.addLayer(composite.clip(zambia), trueColorVis, 'composite', false);

//Calculate NDVI
var ndvicol = {min: 0, max: 1, palette: ['red', 'white', 'green']};
var ndvi = composite.normalizedDifference(['B5', 'B4']).rename("NDVI")
Map.addLayer(ndvi.clip(zambia), ndvicol, 'NDVI Function', false)

//Calculate GCVI with Map Algebra
var gcvicol = {min: 0, max: 1, palette: ['blue', 'white', 'green']};
var nir = composite.select('B5'); //Sub 'B5' with 'NIR'
var green = composite.select('B3');//Sub 'B3' with 'G'
var gcvi = (nir.divide(green)).subtract(1).rename("GCVI");

// Map.addLayer(gcvi.clip(zambia), gcvicol, 'Map Algebra GCVI' )


//PART 2 - SETTING IMAGERY BANDS
//Convert image collection to image
var image = ee.Image(composite)
//Add ndvi and gcvi into bands, totally 10 bands
var img = image.select(['B2', 'B3', 'B4', 'B5']).addBands(ndvi).addBands(gcvi);

print(img)

//PART 3 - SETTING RANDOM SAMPLES
// Global Cropland data from University of Maryland's Global Land & Discovery Lab
var dat = ee.ImageCollection('users/potapovpeter/Global_cropland_2019').toList(10).get(2)
var dat = ee.Image(dat)

// Remap the land cover class values to a 0-based sequential series.
var classValues = [0, 1];
var remapValues = ee.List.sequence(0, 1);
var label = 'dat';
dat = dat.remap(classValues, remapValues).rename(label).toByte();
print(dat)

// Add land cover as a band of the reflectance image and sample 200 pixels at
// 50 m scale from each land cover class within a region of interest.
// Use digitize tool to draw a polygon for sample region
var sample = img.addBands(dat).stratifiedSample({
  numPoints: 500,
  classBand: label,
  region: south_zambia,
  scale: 50,
  geometries: true
});

// Add a random value field to the sample and use it to approximately split 80%
// of the features into a training set and 20% into a validation set.
sample = sample.randomColumn();
var trainingSample = sample.filter('random <= 0.8');
var validationSample = sample.filter('random > 0.8');
print(sample)


//PART4 - RANDOM FOREST 
// Train a 100-tree random forest classifier from the training sample.
var trainedClassifier = ee.Classifier.smileRandomForest(100).train({
  features: trainingSample,
  classProperty: label,
  inputProperties: img.bandNames()
});

// Get information about the trained classifier.
var dict = trainedClassifier.explain();
print('Results of trained classifier', dict);

// Get a confusion matrix and overall accuracy for the training sample.
var trainAccuracy = trainedClassifier.confusionMatrix();
print('Training error matrix', trainAccuracy);
print('Training overall accuracy', trainAccuracy.accuracy());

// Get a confusion matrix and overall accuracy for the validation sample.
validationSample = validationSample.classify(trainedClassifier);
var validationAccuracy = validationSample.errorMatrix(label, 'classification');
print('Validation error matrix', validationAccuracy);
print('Validation accuracy', validationAccuracy.accuracy());

// Classify the reflectance image from the trained classifier.
var imgClassified = img.classify(trainedClassifier);

// Add the layers to the map.
var classVis = {
  min: 0,
  max: 1,
  palette: ['black' ,'green']
};

//variable importance chart
var variable_importance = ee.Feature(null, ee.Dictionary(dict).get('importance'));
var chart =
  ui.Chart.feature.byProperty(variable_importance)
    .setChartType('ColumnChart')
    .setOptions({
      title: 'Random Forest Variable Importance',
      legend: {position: 'none'},
      hAxis: {title: 'Bands'},
      vAxis: {title: 'Importance'}
    });
print(chart); 


Map.centerObject(south_zambia);
// Map.addLayer(img, {bands: ['B4', 'B3', 'B2'], min: 100, max: 3500}, 'img', false);
Map.addLayer(dat, classVis, 'dat');
Map.addLayer(imgClassified, classVis, 'Classified');
Map.addLayer(south_zambia, {color: 'white'}, 'south zambia', false, 0.5);
//Map.addLayer(polygon, {color: 'purple'}, 'sample area', false, 0.5);
Map.addLayer(trainingSample, {color: 'black'}, 'Training sample', false);
Map.addLayer(validationSample, {color: 'white'}, 'Validation sample', false);

